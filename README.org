
* Introduction

The =ox_jwt= repository provides some simple tools for working with JSON Web
Tokens (JWTs).

For example, the =nginx= sub-directory contains a fully working
minimal example of how you can setup NGINX to only allow access to
your locations if the client has a JWT in the URL, header, or browser
cookie.

This is useful because:

  1. You can easily protect access to your internal or external servers.
     - For example, requiring a JWT will block hackers trying to brute
       force username/password combinations.
     - Checking the JWT in NGINX prevents hackers from exploiting
       vulnerabilities in your application server.
  2. Since NGINX is a widely used open source web server, this
     approach to security is easy to integrate with most systems.
  3. All of the encryption/decryption used is open source, verifiable,
     and modifiable by you.

* Quickstart and Demo

For a simple test of the system, you can do something like
#+BEGIN_SRC sh
make test
#+END_SRC
at the command line to do the following:

  1. Install the npm dependencies listed in =nginx/ojwt/package.json=
     using =npm install= (you will need to have a reasonable version
     of =npm= already installed).
  2. Create private/public/test keys in =nginx/ojwt/*.pem=
  3. Use the keys to create a test JWT in =ojwt/prod_test_jwt.txt=.
     - This JWT is keyed to the host =example.com=.
  4. Build the single file javascript bundle in =nginx/ojwt/ojwt.js=.
     - This is the only file that you need to put onto your NGINX web
       server. It contains all the encryption/decryption code as well
       as your public key (but not your private key).
  5. Build and start a simple NGINX docker container using =nginx/Dockerfile=.
  6. Uses =curl= to verify that you can only access the protected
     location in your NGINX server if you have the appropriate JWT.

* FAQ

** What are some alternatives to =ox_jwt=?

- SSL client certificates
  - but [[https://security.stackexchange.com/questions/198837/why-is-client-certificate-authentication-not-more-common][SSL client certificates are difficult to setup and maintain]]
    without providing any additional security beyond JWTs.
- NGINX PLUS commercial web server [[https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-jwt-authentication/][includes JWT support]]
  - but the licensing for NGINX PLUS is expensive
  - and you have more control with =ox_jwt= since you can see and
    modify all of the JWT validation code yourself

** How do you setup protection?

See the NGINX configuration file in
[[./nginx/conf.d/example.conf]]. Basically you do the following in your
NGINX configuration file:

  1. Add a line like =js_import conf.d/ojwt.js;= near the top of your
     config.
     - This tells where to find the =ojwt.js= single file javascript
       bundle which you build via =cd nginx/ojwt && make ojwt.js=.
     - The =ojwt.js= includes your public key.
  2. Add a line like =js_set $decoded_ojwt auth_tools.decode_jwt;=
     near the top of your config.
     - This tells NGINX to use the =auth_tools.decode_jwt= function
       from =ojwt.js= to try to decode JWTs from the URL or header or
       cookie of incoming requests and put the result into the
       =$decoded_ojwt= NGINX variable.
  3. Put a block like the following in your NGINX config to return a
     401 error if the JWT is not valid:
#+BEGIN_EXAMPLE
    location /protected {
      if ($decoded_ojwt ~ "^fail.*") {
        return 401 $decoded_ojwt;
      }
    }
#+END_EXAMPLE

Once you have the above, all of your protected locations will require
valid JWTs but users can still access any locations you choose not to
protect as usual.

** How can I create a JWT for a user?
   :PROPERTIES:
   :CUSTOM_ID:       how-can-i-create-a-jwt-for-a-user
   :END:

You can create JWTs as usual using your private RSA key. As a
convenience, =ox_jwt= provides a simple command line tool to generate
JWTs. To access it, simply do something like the following:
#+BEGIN_SRC sh
cd /path/to/nginx/ojwt/
make private_key.pem  # only need to do this once; or provide your own

node otools.js encode -k private_key.pem \
  -m "my example msg" -h example.com -exp 2023-04-02
# You can replace the above parameters as you like or omit them.
#+END_SRC

** How is this secure?

When you want to give someone access to a server or area that you have
protected, you simply give them a JWT created using your
=private_key.pem= (keep this file secure!). See the above discussion
for [[#how-can-i-create-a-jwt-for-a-user][How can I create a JWT for a user]].

The user then provides this JWT in the URL query parameters via
something like ~?jwt=YOUR_JWT~. NGINX will contain the *PUBLIC* key but
not the *PRIVATE* key. So when the user attempts to gain access, NGINX
will verify that the JWT was created by the corresponding private key.

Note that because we use public key cryptography, you do not need to
store any secret information on the NGINX server. You simply store the
*PUBLIC* which cannot be used to create new JWTs. Thus if your NGINX
server is compromised or non-privileged people have access to the
=ojwt.js= file you deploy, that is not a problem.


