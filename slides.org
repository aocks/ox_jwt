
#+BEGIN_SRC emacs-lisp :exports none
(require 'ox-reveal)

;; Make sure to use version 4.0 and set REVEAL_REVEAL_JS_VERSION below
(setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js@4.0.0/")
(setq org-reveal-plugins '(notes))
#+END_SRC

#+COMMENT: using timestamp:nil suppresses "created at" in title
#+COMMENT: using num:nil prevents slide titles being numbered
#+OPTIONS: timestamp:nil num:nil

#+REVEAL_REVEAL_JS_VERSION: 4
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js@4.0.0/
#+REVEAL_PLUGINS: (notes)
#+REVEAL_THEME: solarized
#+REVEAL_INIT_OPTIONS: fragments:true, transition:'fade'


#+COMMENT: Use `s` to engage speaker mode

#+TITLE: Tips, Tricks, and Reasons for JSON Web Tokens (JWTs)
#+AUTHOR: Emin Martinian

* Code Fragment Example :noexport:

#+BEGIN_SRC python
print("This appears immediately")
#+END_SRC

#+ATTR_REVEAL: :frag appear
#+BEGIN_SRC python
print("This appears after clicking")
#+END_SRC


* JWT: JSON Web Token

Used for authentication/authorization such as:

- front-end client to access back-end or API server
- compact, [[https://datatracker.ietf.org/doc/html/rfc7519][standardized]], secured, customizable
- "state-less" alternative to cookies/sessions
- scalable, performant, distributed trust


#+BEGIN_NOTES
- standard: [[https://datatracker.ietf.org/doc/html/rfc7519][RFC 7519]]
#+END_NOTES

* Why JWTs?

#+BEGIN_NOTES
- Auth server manages passwords, takes credit cards, etc.
- Must be secure and in sync; hard to load balance
- Cannot let just any employee have access
#+END_NOTES

Separate authentication from validation/application:
- Authentication requires secret keys (high security)
- Validation can use public key (less security)
- Easier to manage secrets, keys, load, sync, etc.

#+name: jwt-auth-vs-app-start
#+begin_src dot :cmdline -Kdot -Tjpg :exports results :file images/jwt-auth-vs-app-start.jpg

digraph auth_system {
    // Define subgraphs
    subgraph top {
        rank=same;
        AuthServer [label="Auth Server", shape=box];
        hidden [style=invis];
        AppServer [label="App Server", shape=box];
    }

    subgraph bottom {
        rank=same;
        Client [label="Client", shape=box];
    }

    // Define connections
    AuthServer -> Client [label="JWT", constraint=false, splines=ortho, style=invis];
    Client -> AuthServer [label="Authenticate\n(e.g., login\nor OAuth\nor credit card)", constraint=false, splines=ortho, style=invis];
    Client -> AppServer [label="Request Service\nusing JWT", constraint=false, splines=ortho,style=invis];

    // Define hidden edges to force layout
    AuthServer -> hidden [style=invis];
    hidden -> AppServer [style=invis];
    hidden -> Client [style=invis];
}

#+end_src

#+RESULTS: jwt-auth-vs-app-start
[[file:images/jwt-auth-vs-app-start.jpg]]


* JWT: Authentication Request

#+BEGIN_NOTES
Managing the authentication server is more complicated.
- Can't allow just anyone to access/maintain/deploy (has secrets)
- Must maintain state (e.g., current user password) so hard to load balance
#+END_NOTES


Client authenticates to server:

#+ATTR_REVEAL: :frag (appear appear)
- login with username/password/MFA
- may require database check, locks, other slow ops
- auth server must be secure


#+name: jwt-auth-vs-app-auth
#+begin_src dot :cmdline -Kdot -Tjpg :exports results :file images/jwt-auth-vs-app-auth.jpg

digraph auth_system {
    // Define subgraphs
    subgraph top {
        rank=same;
        AuthServer [label="Auth Server", shape=box];
        hidden [style=invis];
        AppServer [label="App Server", shape=box];
    }

    subgraph bottom {
        rank=same;
        Client [label="Client", shape=box];
    }

    // Define connections
    AuthServer -> Client [label="JWT", constraint=false, splines=ortho, style=invis];
    Client -> AuthServer [label="Authenticate\n(e.g., login\nor OAuth or\ncredit card)", constraint=false, splines=ortho];
    Client -> AppServer [label="Request Service\nusing JWT", constraint=false, splines=ortho,style=invis];

    // Define hidden edges to force layout
    AuthServer -> hidden [style=invis];
    hidden -> AppServer [style=invis];
    hidden -> Client [style=invis];
}

#+end_src

#+RESULTS: jwt-auth-vs-app-auth
[[file:images/jwt-auth-vs-app-auth.jpg]]


* JWT: Authentication Response

Server responds with JWT:

#+ATTR_REVEAL: :frag (appear appear)
- header describing JWT
- claims describing information/rights
- signature from Auth Server

#+name: jwt-auth-vs-app-auth-response
#+begin_src dot :cmdline -Kdot -Tjpg :exports results :file images/jwt-auth-vs-app-auth-response.jpg

digraph auth_system {
    // Define subgraphs
    subgraph top {
        rank=same;
        AuthServer [label="Auth Server", shape=box];
        hidden [style=invis];
        AppServer [label="App Server", shape=box];
    }

    subgraph bottom {
        rank=same;
        Client [label="Client", shape=box];
    }

    // Define connections
    AuthServer -> Client [label="JWT", constraint=false, splines=ortho];
    Client -> AuthServer [label="Authenticate\n(e.g., login\nor OAuth)", constraint=false, splines=ortho,style=invis];
    Client -> AppServer [label="Request Service\nusing JWT", constraint=false, splines=ortho,style=invis];

    // Define hidden edges to force layout
    AuthServer -> hidden [style=invis];
    hidden -> AppServer [style=invis];
    hidden -> Client [style=invis];
}

#+end_src

#+RESULTS: jwt-auth-vs-app-auth-response
[[file:images/jwt-auth-vs-app-auth-response.jpg]]


* JWT: Application Request

#+BEGIN_NOTES
- Distributed Trust
- App Server can be load balanced or serverless
- App Server can be maintained with lower security requirements
#+END_NOTES


Client sends JWT to App Server:

#+ATTR_REVEAL: :frag (appear appear)
- App Server validates JWT with public key
- No DB/state/sync/update; can be serverless
- Checks JWT for rights + provides service




#+name: jwt-auth-vs-app-request-app
#+begin_src dot :cmdline -Kdot -Tjpg :exports results :file images/jwt-auth-vs-app-request-app.jpg

digraph auth_system {
    // Define subgraphs
    subgraph top {
        rank=same;
        AuthServer [label="Auth Server", shape=box];
        hidden [style=invis];
        AppServer [label="App Server", shape=box];
    }

    subgraph bottom {
        rank=same;
        Client [label="Client", shape=box];
    }

    // Define connections
    AuthServer -> Client [label="JWT", constraint=false, splines=ortho,style=invis];
    Client -> AuthServer [label="Authenticate\n(e.g., login\nor OAuth)", constraint=false, splines=ortho,style=invis];
    Client -> AppServer [label="Send JWT to\nRequest Service", constraint=false, splines=ortho];

    // Define hidden edges to force layout
    AuthServer -> hidden [style=invis];
    hidden -> AppServer [style=invis];
    hidden -> Client [style=invis];
}

#+end_src

#+RESULTS: jwt-auth-vs-app-request-app
[[file:images/jwt-auth-vs-app-request-app.jpg]]





* Separate Auth From Validation

Auth Server has **secrets**; needs **security** + maintenance

#+ATTR_REVEAL: :frag (appear appear)
- App Server needs public keys; low security
- Easy to deploy App Server(s); e.g., serverless
- Lower security for App Server, logs, debug, etc.

#+name: jwt-auth-vs-app-separate
#+begin_src dot :cmdline -Kdot -Tjpg :exports results :file images/jwt-auth-vs-app-separate.jpg

digraph auth_system {
    // Define subgraphs
    subgraph top {
        rank=same;
        AuthServer [label="Auth Server", shape=box];
        hidden [style=invis];
        AppServer [label="App Server", shape=box];
    }

    subgraph bottom {
        rank=same;
        Client [label="Client", shape=box];
    }

    // Define connections
    AuthServer -> Client [label="JWT", constraint=false, splines=ortho,style=invis];
    Client -> AuthServer [label="Authenticate\n(e.g., login\nor OAuth)", constraint=false, splines=ortho,style=invis];
    Client -> AppServer [label="Send JWT to\nRequest Service", constraint=false, splines=ortho, style=invis];

    // Define hidden edges to force layout
    AuthServer -> hidden [style=invis];
    hidden -> AppServer [style=invis];
    hidden -> Client [style=invis];
}

#+end_src

#+RESULTS: jwt-auth-vs-app-separate
[[file:images/jwt-auth-vs-app-separate.jpg]]






* What do JWTs look like?

Base64 encoded header.payload.signature:

#+ATTR_REVEAL: :frag appear :frag_idx 1
#+BEGIN_src shell
HEADER:     { "alg": "HS256", "typ": "JWT" }
#+END_src

#+ATTR_REVEAL: :frag appear :frag_idx 2
#+BEGIN_src shell
PAYLOAD:    {"sub": "a", "name": "arbitrary data", "iat": 1 }
#+END_src

#+ATTR_REVEAL: :frag appear :frag_idx 3
#+BEGIN_src shell
SIGNATURE:  (depends on signing algorithm)
#+END_src

#+ATTR_REVEAL: :frag appear :frag_idx 4
- Signed using HS256 with secret=123:

#+ATTR_REVEAL: :frag appear :frag_idx 4
#+BEGIN_src shell
   eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
  .eyJzdWIiOiJhIiwibmFtZSI6ImIiLCJpYXQiOjF9
  .k4P2aZc9d0yYjaEXlHwl0e1PhNtmN1gLD9gtZvA59f4
#+END_src

#+BEGIN_NOTES
- Use https://jwt.io/#debugger-io to verify/validate/decode
#+END_NOTES



